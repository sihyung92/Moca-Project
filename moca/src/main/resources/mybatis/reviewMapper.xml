<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kkssj.moca.model.ReviewDao">
  <select id="selectReviewByStoreId" resultType="com.kkssj.moca.model.entity.ReviewVo" parameterType="map">
	SELECT r.REVIEW_ID, r.ACCOUNT_ID, (r.ACCOUNT_ID=${ACCOUNT_ID}) 'editable', r.STORE_ID, r.REVIEWCONTENT, r.WRITEDATE, 
	r.TASTELEVEL, r.PRICELEVEL, r.SERVICELEVEL, r.MOODLEVEL, r.CONVENIENCELEVEL, AVERAGELEVEL, r.LIKECOUNT, r.HATECOUNT, 
	ifnull((SELECT isLike FROM LIKEHATE l WHERE r.review_id = l.review_id AND l.ACCOUNT_ID = #{ACCOUNT_ID}),0)  "isLike",
	a.THUMBNAILIMAGE ,a.NICKNAME, a.FOLLOWCOUNT, a.REVIEWCOUNT
	FROM REVIEW r JOIN ACCOUNT a ON r.ACCOUNT_ID = a.ACCOUNT_ID
	WHERE r.STORE_ID = #{STORE_ID}
	ORDER BY r.REVIEW_ID
  </select>
  
  <select id="selectReviewImgListByStoreId" parameterType="Integer" resultType="com.kkssj.moca.model.entity.ImageVo">
  	SELECT * FROM REVIEWIMAGE WHERE STORE_ID=#{STORE_ID} order by REVIEW_ID
  </select>
  
  <select id="selectAllReviewId" resultType="com.kkssj.moca.model.entity.ReviewVo">
 	SELECT review_id FROM REVIEW
  </select>
  
  <select id="selectAllReviewLevel" resultType="com.kkssj.moca.model.entity.ReviewVo">
 	SELECT TASTELEVEL, PRICELEVEL, SERVICELEVEL, MOODLEVEL, CONVENIENCELEVEL
	FROM REVIEW
	WHERE STORE_ID = #{STORE_ID}
  </select>
  
  <delete id="deleteReview" parameterType="com.kkssj.moca.model.entity.ReviewVo">
  	DELETE FROM REVIEW WHERE review_id=#{review_id} AND ACCOUNT_ID= ${account_id}
  </delete>
   
  <insert id="insertLikeHate"  parameterType="map">
  	INSERT INTO LIKEHATE(review_id, account_id, isLike) VALUES(#{REVIEW_ID}, #{ACCOUNT_ID}, #{ISLIKE})
  </insert>
  
  <update id="updateLikeHate" parameterType="map">
  	UPDATE LIKEHATE SET isLike=#{ISLIKE } WHERE review_id = #{REVIEW_ID} AND account_id = #{ACCOUNT_ID}
  </update>
  <delete id="deleteLikeHate" parameterType="map">
  	DELETE FROM LIKEHATE WHERE review_id = #{REVIEW_ID} AND account_id = #{ACCOUNT_ID}
  </delete>
  
  <update id="updateLikeCount" parameterType="map">
	UPDATE REVIEW r
	SET r.LIKECOUNT = (
		SELECT count(*) FROM LIKEHATE lh 
		WHERE lh.REVIEW_ID =#{REVIEW_ID} AND lh.ISLIKE=1 
	) 
	WHERE r.REVIEW_ID = #{REVIEW_ID}
	LIMIT 1	
  </update>
  <update id="updateHateCount" parameterType="map">
	UPDATE REVIEW r
	SET r.LIKECOUNT = (
		SELECT count(*) FROM LIKEHATE lh 
		WHERE lh.REVIEW_ID =#{REVIEW_ID} AND lh.ISLIKE=-1 
	) 
	WHERE r.REVIEW_ID = #{REVIEW_ID}
	LIMIT 1
  </update>
  <select id="selectLikeHateCount" parameterType="Integer" resultType="com.kkssj.moca.model.entity.ReviewVo">
  	SELECT likeCount, hateCount FROM REVIEW WHERE review_id = #{id}
  </select>
  
  <select id="selectLikeHateLike" parameterType="Integer" resultType="Integer">
  	SELECT count(*) FROM (SELECT * FROM LIKEHATE WHERE isLike=1 AND review_id = #{id} ) l GROUP BY isLike;
  </select>
  <select id="selectLikeHateHate" parameterType="Integer" resultType="Integer">
 	SELECT count(*) FROM (SELECT * FROM LIKEHATE WHERE isLike=-1 AND review_id = #{id} ) l GROUP BY isLike;
  </select>
  
  <insert id="insertReview" parameterType="com.kkssj.moca.model.entity.ReviewVo">
  	INSERT INTO REVIEW(ACCOUNT_ID, STORE_ID, REVIEWCONTENT, WRITEDATE, TASTELEVEL, PRICELEVEL, SERVICELEVEL, MOODLEVEL, CONVENIENCELEVEL, AVERAGELEVEL, LIKECOUNT,HATECOUNT) 
  	VALUES(#{account_id}, #{store_id}, #{reviewContent}, NOW(), #{tasteLevel}, #{priceLevel}, #{serviceLevel}, #{moodLevel}, #{convenienceLevel}, #{averageLevel}, 0, 0)
  </insert>
  <select id="selectAddedOne" parameterType="Integer" resultType="com.kkssj.moca.model.entity.ReviewVo">
  	SELECT r.REVIEW_ID, r.ACCOUNT_ID, r.STORE_ID, r.REVIEWCONTENT, r.WRITEDATE, 
	r.TASTELEVEL, r.PRICELEVEL, r.SERVICELEVEL, r.MOODLEVEL, r.CONVENIENCELEVEL, AVERAGELEVEL, r.LIKECOUNT, r.HATECOUNT, 
	a.NICKNAME, a.FOLLOWCOUNT, a.REVIEWCOUNT
	FROM REVIEW r JOIN ACCOUNT a ON r.ACCOUNT_ID = a.ACCOUNT_ID
	WHERE  a.ACCOUNT_ID = #{id}
	ORDER BY r.WRITEDATE DESC
	LIMIT 1;
  </select>
  <update id="updateReview" parameterType="com.kkssj.moca.model.entity.ReviewVo">
  	UPDATE REVIEW SET REVIEWCONTENT=#{reviewContent}, TASTELEVEL=#{tasteLevel}, PRICELEVEL=#{priceLevel}, 
  	SERVICELEVEL=#{serviceLevel}, MOODLEVEL= #{moodLevel}, CONVENIENCELEVEL=#{convenienceLevel}, AVERAGELEVEL=#{averageLevel} 
	WHERE STORE_ID=#{store_id} AND REVIEW_ID = #{review_id} AND ACCOUNT_ID=#{account_id}; 
  </update>
  
  <insert id="insertReviewImage" parameterType="com.kkssj.moca.model.entity.ImageVo">
  	INSERT INTO REVIEWIMAGE(UU_ID, REVIEW_ID, ACCOUNT_ID, STORE_ID, PATH, ORIGINNAME, VIEWS) 
	VALUES(#{uu_id}, #{review_id}, #{account_id}, #{store_id},#{path},#{originName}, 0)
  </insert>
  <delete id="deleteReviewImage" parameterType="com.kkssj.moca.model.entity.ImageVo">
  	DELETE FROM REVIEWIMAGE WHERE UU_ID = #{uu_id} AND ACCOUNT_ID = #{account_id}
  </delete>
  
  <select id="selectReviewImgListByReviewId" parameterType="Integer" resultType="com.kkssj.moca.model.entity.ImageVo">
 	 SELECT uu_id, account_id, review_id, store_id, path, originName, views
 	  FROM REVIEWIMAGE WHERE REVIEW_ID = #{reviewId};
  </select>
  
  <select id="selectRecentReviews" resultType="com.kkssj.moca.model.entity.ReviewVo">
  	 <![CDATA[
  	 	SELECT REVIEW_ID, R.ACCOUNT_ID, R.STORE_ID, REVIEWCONTENT, WRITEDATE, LIKECOUNT, HATECOUNT, NAME as STORENAME, S.AVERAGELEVEL, NICKNAME, THUMBNAILIMAGE
		FROM (SELECT REVIEW_ID, ACCOUNT_ID, STORE_ID, REVIEWCONTENT, WRITEDATE, LIKECOUNT, HATECOUNT FROM REVIEW ORDER BY WRITEDATE DESC LIMIT 15) R
			INNER JOIN ACCOUNT A ON R.ACCOUNT_ID = A.ACCOUNT_ID
			INNER JOIN STORE S ON S.STORE_ID=R.STORE_ID  	 	
	]]>
		<!-- SELECT REVIEW_ID, ACCOUNT_ID, STORE_ID, REVIEWCONTENT, WRITEDATE, LIKECOUNT, HATECOUNT,
			(SELECT NAME FROM STORE WHERE STORE_ID=INNERTABLE.STORE_ID) AS STORENAME,
			(SELECT AVERAGELEVEL FROM STORE WHERE STORE_ID=INNERTABLE.STORE_ID) AS AVERAGELEVEL, 
			(SELECT THUMBNAILIMAGE FROM ACCOUNT WHERE ACCOUNT_ID=INNERTABLE.ACCOUNT_ID) AS THUMBNAILIMAGE,
			(SELECT NICKNAME FROM ACCOUNT WHERE ACCOUNT_ID=INNERTABLE.ACCOUNT_ID) AS NICKNAME
		FROM (SELECT REVIEW_ID, ACCOUNT_ID, STORE_ID, REVIEWCONTENT, WRITEDATE, LIKECOUNT, HATECOUNT FROM REVIEW ORDER BY WRITEDATE DESC LIMIT 15)INNERTABLE -->
  </select>
  
  <select id="selectBestReviews" resultType="com.kkssj.moca.model.entity.ReviewVo">
  	 <![CDATA[
		SELECT REVIEW_ID, R.ACCOUNT_ID, R.STORE_ID, REVIEWCONTENT, WRITEDATE, LIKECOUNT, HATECOUNT, NAME as STORENAME, S.AVERAGELEVEL, NICKNAME, THUMBNAILIMAGE
		FROM (SELECT REVIEW_ID, ACCOUNT_ID, STORE_ID, REVIEWCONTENT, WRITEDATE, LIKECOUNT, HATECOUNT FROM REVIEW WHERE WRITEDATE > (NOW() - INTERVAL 7 DAY) ORDER BY LIKECOUNT DESC, WRITEDATE DESC LIMIT 15)R
			INNER JOIN ACCOUNT A ON R.ACCOUNT_ID = A.ACCOUNT_ID 
			INNER JOIN STORE S ON S.STORE_ID=R.STORE_ID
	]]>
  </select>
  
  <select id="selectReviewListByAccountId" parameterType="map" resultType="com.kkssj.moca.model.entity.ReviewVo">
  	SELECT r.REVIEW_ID, r.ACCOUNT_ID, (r.ACCOUNT_ID=${SESSION_ID}) 'editable', r.STORE_ID, s.NAME 'storeName', s.LOGOIMG 'storeLogoImg', r.REVIEWCONTENT, r.WRITEDATE, 
	r.TASTELEVEL, r.PRICELEVEL, r.SERVICELEVEL, r.MOODLEVEL, r.CONVENIENCELEVEL, r.AVERAGELEVEL, r.LIKECOUNT, r.HATECOUNT, 
	ifnull((SELECT isLike FROM LIKEHATE l WHERE r.review_id = l.review_id AND l.ACCOUNT_ID = #{SESSION_ID}),0)  "isLike",
	a.NICKNAME, a.FOLLOWCOUNT, a.REVIEWCOUNT
	FROM REVIEW r JOIN ACCOUNT a ON r.ACCOUNT_ID = a.ACCOUNT_ID
	JOIN STORE s ON r.STORE_ID = s.STORE_ID
	WHERE r.ACCOUNT_ID = #{ACCOUNT_ID}
	ORDER BY r.WRITEDATE DESC
	limit #{STARTNUM}, #{ENDNUM}
  </select>
  
  <select id="selectReviewImgListByAccountId" parameterType="Integer" resultType="com.kkssj.moca.model.entity.ImageVo">
 	 SELECT uu_id, ACCOUNT_ID, REVIEW_ID, STORE_ID, path, originName, views
 	  FROM REVIEWIMAGE WHERE ACCOUNT_ID = #{ACCOUNT_ID}
  </select>
  
  <select id="selectAccountIdOfReviewByReviewId" parameterType="Integer" resultType="Integer">
  	SELECT ACCOUNT_ID FROM REVIEW WHERE REVIEW_ID = #{REVIEW_ID}
  </select>
  
  <!-- review 3개씩 가져오기 -->
  <select id="selectReviewLimit3ByStoreId" resultType="com.kkssj.moca.model.entity.ReviewVo" parameterType="map">
	SELECT r.REVIEW_ID, r.ACCOUNT_ID, (r.ACCOUNT_ID=#{ACCOUNT_ID}) 'editable', r.STORE_ID, r.REVIEWCONTENT, r.WRITEDATE, 
	r.TASTELEVEL, r.PRICELEVEL, r.SERVICELEVEL, r.MOODLEVEL, r.CONVENIENCELEVEL, AVERAGELEVEL, r.LIKECOUNT, r.HATECOUNT, 
	ifnull((SELECT isLike FROM LIKEHATE l WHERE r.review_id = l.review_id AND l.ACCOUNT_ID = #{ACCOUNT_ID}),0) "isLike",
	a.THUMBNAILIMAGE ,a.NICKNAME, a.FOLLOWCOUNT, a.REVIEWCOUNT
	FROM REVIEW r JOIN ACCOUNT a ON r.ACCOUNT_ID = a.ACCOUNT_ID
	WHERE r.STORE_ID = #{STORE_ID}
	ORDER BY FIELD(r.ACCOUNT_ID,#{ACCOUNT_ID}) DESC, r.LIKECOUNT DESC, r.REVIEW_ID
	limit #{STARTNUM}, #{ENDNUM}
  </select>
  <select id="selectTagsLimit3ByStoreId" resultType="map" parameterType="map">
	SELECT r.REVIEW_ID, t.* 
	FROM TAGS t right JOIN REVIEW r ON r.REVIEW_ID = t.REVIEW_ID 
	JOIN  ACCOUNT a ON r.ACCOUNT_ID = a.ACCOUNT_ID
	WHERE r.STORE_ID = #{STORE_ID}
	ORDER BY FIELD(r.ACCOUNT_ID,#{ACCOUNT_ID}) DESC, r.LIKECOUNT DESC, r.REVIEW_ID
	limit #{STARTNUM}, #{ENDNUM}
  </select>
  <insert id="insertTags" parameterType="map">
  	INSERT INTO TAGS(REVIEW_ID, STORE_ID ${TAGS }) VALUES(${REVIEW_ID }, ${STORE_ID } ${TAGVALUES });
  </insert>
  <update id="updateTags" parameterType="map">
 	UPDATE TAGS SET REVIEW_ID=${REVIEW_ID }  ${SETTAG } WHERE REVIEW_ID = ${REVIEW_ID } 
  </update>
  <select id="selectTagsLimit3ByAccountId" resultType="map" parameterType="map">
	SELECT r.REVIEW_ID, t.* 
	FROM TAGS t right JOIN REVIEW r ON r.REVIEW_ID = t.REVIEW_ID 
	JOIN  ACCOUNT a ON r.ACCOUNT_ID = a.ACCOUNT_ID
	WHERE r.ACCOUNT_ID = #{ACCOUNT_ID}
	ORDER BY r.WRITEDATE DESC
	limit #{STARTNUM}, #{ENDNUM}
  </select>
  <select id="selectTagListByStoreId" parameterType="Integer" resultType="map">
  	SELECT * FROM TAGS WHERE STORE_ID = #{store_id}
  </select>
  
  <select id="selectAverageLevelByReviewId" parameterType="Integer" resultType="Double">
  	SELECT AVERAGELEVEL FROM REVIEW WHERE REVIEW_ID = #{REVIEW_ID}
  </select>
  
  <select id="selectReviewAverageLevelByStoreId" parameterType="Integer" resultType="Double">
  	SELECT AVERAGELEVEL FROM REVIEW WHERE STORE_ID = #{STORE_ID}
  </select>
  
  <update id="updateReviewImageViews" parameterType="String">
  	UPDATE REVIEWIMAGE ri SET ri.VIEWS = ri.VIEWS+1 WHERE ri.UU_ID = #{UU_ID}
  </update>
  
  <select id="selectLikeHateCountByAccountId" resultType="Integer">
  <![CDATA[
  	SELECT count(*) 
  	FROM LIKEHATE l JOIN REVIEW r on l.REVIEW_ID = r.REVIEW_ID 
  	WHERE r.ACCOUNT_ID = #{ACCOUNT_ID} AND r.ACCOUNT_ID <> l.ACCOUNT_ID
  	GROUP BY r.ACCOUNT_ID	
  ]]>
  </select>
  
  <select id="selectReviewCountByAccountId" parameterType="Integer" resultType="Integer">
   SELECT count(*) FROM REVIEW r GROUP BY r.ACCOUNT_ID HAVING r.ACCOUNT_ID = #{ACCOUNT_ID}
  </select>
  
</mapper>